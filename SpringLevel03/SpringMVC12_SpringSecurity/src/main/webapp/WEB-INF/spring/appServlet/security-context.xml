<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd">

<!-- 
	인증과 권한에 대한 세팅을 하는 부분
	DB에 정보를 저장하지 않고 시큐리티 내장영역에다 정보를 저장해서 사용 - InMemory방식
	::
	사용자가 ~라고 요청을 하면
	이 요청을 인터셉터인 DelegatinFilterProxy가 가로채어서
	설정문서에 등록된 인증과 권한의 내용이 그대로 실행되도록 한다.
 -->
 <security:http auto-config="true" use-expressions="true">
 	<security:intercept-url pattern="/user.kosta" access="hasRole('ROLE_USER')"/>
 	 <security:intercept-url pattern="/admin.kosta" access="hasRole('ROLE_ADMIN')"/>
 	
 </security:http>
 
 <!-- 각각의 권한에 누가 해당되는지를 설정하는 부분 :: 한 사람이 여러 권한을 가진다.
 	요청에 따라서 계속적으로 서로 다른 권한을 지정할 수 있다.
 -->
<security:authentication-manager>
	<security:authentication-provider>
		<security:user-service>
			<!-- ID가 user, password가 1234 로 인증된 사람의 권한을 지정 -->
			<security:user name="user" password="1234" authorities="ROLE_USER"/>
			<security:user name="admin" password="1234" authorities="ROLE_ADMIN, ROLE_USER" />
		</security:user-service>
	</security:authentication-provider>
</security:authentication-manager>

</beans>



